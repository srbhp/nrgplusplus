<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="functions_8hpp" kind="file" language="C++">
    <compoundname>functions.hpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="sparseSolver_8hpp" local="yes">nrgcore/include/utils/sparseSolver.hpp</includedby>
    <incdepgraph>
      <node id="536">
        <label>cmath</label>
      </node>
      <node id="538">
        <label>string</label>
      </node>
      <node id="539">
        <label>vector</label>
      </node>
      <node id="537">
        <label>sstream</label>
      </node>
      <node id="535">
        <label>nrgcore/include/utils/functions.hpp</label>
        <link refid="functions_8hpp"/>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="540">
        <label>nrgcore/include/utils/functions.hpp</label>
        <link refid="functions_8hpp"/>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="541">
        <label>nrgcore/include/utils/sparseSolver.hpp</label>
        <link refid="sparseSolver_8hpp_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="functions_8hpp_1a25b9b7a11ac54dada4a6846ad7cd8309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T sign</definition>
        <argsstring>(T x)</argsstring>
        <name>sign</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/utils/functions.hpp" line="7" column="1" bodyfile="nrgcore/include/utils/functions.hpp" bodystart="7" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="functions_8hpp_1a4e7a68798ad527dfe63e74462a51c458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t minIndex</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vec)</argsstring>
        <name>minIndex</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/utils/functions.hpp" line="16" column="1" bodyfile="nrgcore/include/utils/functions.hpp" bodystart="16" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="functions_8hpp_1ae63e1db5d0d40db1a2f3f5128478bf78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string to_string_with_precision</definition>
        <argsstring>(const T a_value, const int n=6)</argsstring>
        <name>to_string_with_precision</name>
        <param>
          <type>const T</type>
          <declname>a_value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
          <defval>6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/utils/functions.hpp" line="29" column="1" bodyfile="nrgcore/include/utils/functions.hpp" bodystart="29" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sign<sp/>function<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>sign(T<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>minIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;vec)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/>value<sp/>=<sp/>std::fabs(vec[0]);<sp/></highlight><highlight class="comment">//<sp/>make<sp/>it<sp/>auto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(vec[i])<sp/>&lt;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/><sp/><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>std::fabs(vec[i]);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">std::string<sp/>to_string_with_precision(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>a_value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>out;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>out.precision(n);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>a_value;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="nrgcore/include/utils/functions.hpp"/>
  </compounddef>
</doxygen>
