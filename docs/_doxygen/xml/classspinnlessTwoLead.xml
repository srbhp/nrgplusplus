<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classspinnlessTwoLead" kind="class" language="C++" prot="public">
    <compoundname>spinnlessTwoLead</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classspinnlessTwoLead_1ace3a55ec97fdb150d46f52d25d89c2fa" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classqOperator" kindref="compound">qOperator</ref> &gt;</type>
        <definition>std::vector&lt;qOperator&gt; spinnlessTwoLead::f_dag_operator</definition>
        <argsstring></argsstring>
        <name>f_dag_operator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="73" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspinnlessTwoLead_1a7f784b51936731445978acbbc60a89ac" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; spinnlessTwoLead::eigenvalues_Q</definition>
        <argsstring></argsstring>
        <name>eigenvalues_Q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="74" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspinnlessTwoLead_1aea00e1c0503ea306b03a122d6d0c8c1c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; spinnlessTwoLead::chi_Q</definition>
        <argsstring></argsstring>
        <name>chi_Q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="75" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspinnlessTwoLead_1a0989889cde9b83fee758667230d44d07" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;int&gt; &gt; spinnlessTwoLead::n_Q</definition>
        <argsstring></argsstring>
        <name>n_Q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="76" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classspinnlessTwoLead_1a1c49ba39ab179c26dee34d126a4e2828" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>spinnlessTwoLead::spinnlessTwoLead</definition>
        <argsstring>(double teps=0)</argsstring>
        <name>spinnlessTwoLead</name>
        <param>
          <type>double</type>
          <declname>teps</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This class is for a single orbital with coupled to Two lead. Only chrge is conserved </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="13" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="13" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classspinnlessTwoLead_1a97744c841e15a334342f0409a7216902" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;int&gt; &gt; spinnlessTwoLead::get_basis</definition>
        <argsstring>() const</argsstring>
        <name>get_basis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>returns the basis vector</para>        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="47" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classspinnlessTwoLead_1a0f1f344f50272fbd36fa216bf2a80ad1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; spinnlessTwoLead::get_eigenvaluesQ</definition>
        <argsstring>() const</argsstring>
        <name>get_eigenvaluesQ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>returns eigenvalues_Q</para>        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="53" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classspinnlessTwoLead_1a98480e600dc18d0d6dbff427b89fbb40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; spinnlessTwoLead::get_chi_Q</definition>
        <argsstring>() const</argsstring>
        <name>get_chi_Q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This functions returns <computeroutput>vector&lt;vector&gt;</computeroutput> of <formula id="0">$ \chi_Q = e^{n_Q} $</formula></para>        </inbodydescription>
        <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="60" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="60" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="nrgcore/include/models/spinlessTwoLead.hpp" line="6" column="1" bodyfile="nrgcore/include/models/spinlessTwoLead.hpp" bodystart="6" bodyend="77"/>
    <listofallmembers>
      <member refid="classspinnlessTwoLead_1aea00e1c0503ea306b03a122d6d0c8c1c" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>chi_Q</name></member>
      <member refid="classspinnlessTwoLead_1a7f784b51936731445978acbbc60a89ac" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>eigenvalues_Q</name></member>
      <member refid="classspinnlessTwoLead_1ace3a55ec97fdb150d46f52d25d89c2fa" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>f_dag_operator</name></member>
      <member refid="classspinnlessTwoLead_1a97744c841e15a334342f0409a7216902" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>get_basis</name></member>
      <member refid="classspinnlessTwoLead_1a98480e600dc18d0d6dbff427b89fbb40" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>get_chi_Q</name></member>
      <member refid="classspinnlessTwoLead_1a0f1f344f50272fbd36fa216bf2a80ad1" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>get_eigenvaluesQ</name></member>
      <member refid="classspinnlessTwoLead_1a0989889cde9b83fee758667230d44d07" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>n_Q</name></member>
      <member refid="classspinnlessTwoLead_1a1c49ba39ab179c26dee34d126a4e2828" prot="public" virt="non-virtual"><scope>spinnlessTwoLead</scope><name>spinnlessTwoLead</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
