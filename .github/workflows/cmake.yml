name: Github Pages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # schedule:
  #  - cron: '0 0 * * *'  # Once per day

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest #     

    steps:
    - uses: actions/checkout@v3
    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Requirements
      run: 
        sudo apt-get update 
        && sudo apt-get install sphinx-doc doxygen graphviz libhdf5-dev  gpg-agent wget --yes
        && pip3 install sphinx-rtd-theme breathe sphinx-sitemap sphinx==7.1 exhale pydata-sphinx-theme myst-parser
        &&  wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \ | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        && echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        && sudo apt update
        && sudo apt upgrade --yes
        && sudo apt install intel-oneapi-mkl-devel intel-oneapi-compiler-dpcpp-cpp --yes
        && source  /opt/intel/oneapi/setvars.sh 

    - name: Configure CMake and Build 
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: 
        source  /opt/intel/oneapi/setvars.sh 
        && which icpx 
        && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  -DCMAKE_CXX_FLAGS=" -D_GLIBCXX_USE_TBB_PAR_BACKEND=0 -std=c++20 -qopenmp  -qmkl -fp-model precise " -DCMAKE_CXX_COMPILER=icpx  .
        && make -C ${{github.workspace}}/build -j12 all
        && touch ${{github.workspace}}/build/docs/sphinx/.nojekyll
        #   # - name: Build
        # # build 
        # run: 
        #   source  /opt/intel/oneapi/setvars.sh 
        #   && cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} 
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
          # Upload entire repository
          # path: './build/docs/sphinx'
          path: '${{github.workspace}}/build/docs/sphinx'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
